package rut.uvp.family

import org.springframework.ai.tool.annotation.Tool
import org.springframework.ai.tool.annotation.ToolParam
import org.springframework.stereotype.Component
import rut.uvp.family.models.ActivityRequestData
import rut.uvp.family.models.FamilyActivityResponse
import rut.uvp.family.services.EnhancedConversationFlowService
import rut.uvp.family.services.SearchQueryService
import rut.uvp.family.services.TimeSlotService
import rut.uvp.family.services.ParserService
import com.fasterxml.jackson.databind.ObjectMapper
import java.time.LocalDate
import org.slf4j.LoggerFactory

@Component
class FamilyActivityTools(
    private val conversationFlowService: EnhancedConversationFlowService,
    private val timeSlotService: TimeSlotService,
    private val searchQueryService: SearchQueryService,
    private val parserService: ParserService,
    private val objectMapper: ObjectMapper
) {
    private val logger = LoggerFactory.getLogger(FamilyActivityTools::class.java)
    
    @Tool(description = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–º–µ–π–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –¥–æ—Å—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.")
    suspend fun findFamilyActivities(@ToolParam(description = "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—É–≥–∞, –¥–ª—è –∫–æ–≥–æ –∏—â–µ–º, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è") userQuery: String): String {
        logger.info("Finding family activities for query: $userQuery")
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val activityRequest = conversationFlowService.extractActivityRequest(userQuery)
        
        if (activityRequest == null) {
            logger.warn("Failed to extract activity request from user query")
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ."
        }
        
        try {
            logger.info("Extracted activity request: ${objectMapper.writeValueAsString(activityRequest)}")
        } catch (e: Exception) {
            logger.warn("Failed to serialize activity request for logging")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        val (needsMoreInfo, missingFields) = conversationFlowService.needsMoreInformation(activityRequest)
        if (needsMoreInfo) {
            logger.info("Need more information. Missing fields: $missingFields")
            val familyMemberRole = activityRequest.familyMember?.role
            val followUpQuestion = conversationFlowService.generateFollowUpQuestion(missingFields, familyMemberRole)
            return followUpQuestion
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        val selectedTimeSlot = if (activityRequest.needsTimeSlotSelection && activityRequest.preferredDate != null) {
            timeSlotService.generateTimeSlotsForDate(LocalDate.parse(activityRequest.preferredDate)).firstOrNull()
        } else {
            null
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        val searchQuery = searchQueryService.generateSearchQuery(activityRequest, selectedTimeSlot)
        
        if (searchQuery == null) {
            logger.warn("Failed to generate search query")
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
        }
        
        try {
            logger.info("Generated search query: ${objectMapper.writeValueAsString(searchQuery)}")
        } catch (e: Exception) {
            logger.warn("Failed to serialize search query for logging")
        }
        
        // –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        logger.info("Searching activities with query: ${searchQuery.searchQuery}")
        val activities = parserService.searchActivities(searchQuery)
        
        logger.info("Found ${activities.size} activities")
        
        if (activities.isEmpty()) {
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
        }
        
        val response = FamilyActivityResponse(
            request = activityRequest,
            selectedTimeSlot = selectedTimeSlot,
            activities = activities
        )
        
        return formatActivityResponse(response)
    }

    private fun formatActivityResponse(response: FamilyActivityResponse): String {
        val sb = StringBuilder()
        
        val familyMember = response.request.familyMember
        if (familyMember != null) {
            sb.append("–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è ")
            sb.append(familyMember.role ?: "–≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞")
            if (familyMember.age != null) {
                sb.append(" ${familyMember.age} –ª–µ—Ç")
            }
            sb.append(":\n\n")
        } else {
            sb.append("–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n")
        }
        
        response.selectedTimeSlot?.let {
            sb.append("üóìÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: ${it.selectedDate} –≤ ${it.selectedTimeRange}\n\n")
        }
        
        response.activities.forEachIndexed { index, activity ->
            sb.append("${index + 1}. **${activity.title}**\n")
            
            activity.description?.let { sb.append("   ${it}\n") }
            
            val details = mutableListOf<String>()
            
            activity.date?.let { details.add("–î–∞—Ç–∞: $it") }
            activity.time?.let { details.add("–í—Ä–µ–º—è: $it") }
            activity.location?.let { details.add("–ì–¥–µ: $it") }
            activity.price?.let { details.add("–¶–µ–Ω–∞: $it") }
            activity.ageRestriction?.let { details.add("–í–æ–∑—Ä–∞—Å—Ç: $it") }
            
            if (details.isNotEmpty()) {
                sb.append("   _${details.joinToString(" | ")}_\n")
            }
            
            activity.url?.let { sb.append("   üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]($it)\n") }
            
            sb.append("\n")
        }
        
        return sb.toString()
    }
}
