package rut.uvp.family

import org.springframework.ai.tool.annotation.Tool
import org.springframework.ai.tool.annotation.ToolParam
import org.springframework.stereotype.Component
import rut.uvp.family.models.ActivityRequestData
import rut.uvp.family.models.FamilyActivityResponse
import rut.uvp.family.services.ConversationFlowService
import rut.uvp.family.services.DateSelectionService
import rut.uvp.family.services.ParserService
import rut.uvp.family.services.SearchQueryService
import com.fasterxml.jackson.databind.ObjectMapper

@Component
class FamilyActivityTools(
    private val conversationFlowService: ConversationFlowService,
    private val dateSelectionService: DateSelectionService,
    private val searchQueryService: SearchQueryService,
    private val parserService: ParserService,
    private val objectMapper: ObjectMapper
) {
    
    @Tool(description = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–º–µ–π–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –¥–æ—Å—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.")
    fun findFamilyActivities(@ToolParam(description = "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—É–≥–∞, –¥–ª—è –∫–æ–≥–æ –∏—â–µ–º, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è") userQuery: String): String {
        println("Finding family activities for query: $userQuery")
        
        // Step 1: Extract information from the user message
        val activityRequest = conversationFlowService.extractActivityRequest(userQuery)
        
        // Step 2: Check if more information is needed
        val (needsMoreInfo, missingFields) = conversationFlowService.needsMoreInformation(activityRequest)
        if (needsMoreInfo) {
            val followUpQuestion = conversationFlowService.generateFollowUpQuestion(missingFields)
            return followUpQuestion
        }
        
        // Step 3: Auto-select time slot if needed
        val selectedTimeSlot = if (activityRequest.needsTimeSlotSelection) {
            dateSelectionService.selectTimeSlot(activityRequest)
        } else {
            null
        }
        
        // Step 4: Generate search query
        val searchQuery = searchQueryService.generateSearchQuery(activityRequest, selectedTimeSlot)
            ?: return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
        
        // Step 5: Search for activities
        val activities = parserService.searchActivities(searchQuery)
        
        if (activities.isEmpty()) {
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
        }
        
        // Step 6: Format the results
        val response = FamilyActivityResponse(
            request = activityRequest,
            selectedTimeSlot = selectedTimeSlot,
            activities = activities
        )
        
        return formatActivityResponse(response)
    }
    
    /**
     * Formats the activity response into a human-readable text
     * 
     * @param response The activity response object
     * @return A formatted string with activity recommendations
     */
    private fun formatActivityResponse(response: FamilyActivityResponse): String {
        val sb = StringBuilder()
        
        // Add introduction
        val familyMember = response.request.familyMember
        if (familyMember != null) {
            sb.append("–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è ")
            sb.append(familyMember.role ?: "–≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞")
            if (familyMember.age != null) {
                sb.append(" ${familyMember.age} –ª–µ—Ç")
            }
            sb.append(":\n\n")
        } else {
            sb.append("–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n")
        }
        
        // Add selected time slot if available
        response.selectedTimeSlot?.let {
            sb.append("üóìÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è: ${it.selectedDate} –≤ ${it.selectedTimeRange}\n\n")
        }
        
        // Add activities
        response.activities.forEachIndexed { index, activity ->
            sb.append("${index + 1}. **${activity.title}**\n")
            
            activity.description?.let { sb.append("   ${it}\n") }
            
            // Add details
            val details = mutableListOf<String>()
            
            activity.date?.let { details.add("–î–∞—Ç–∞: $it") }
            activity.time?.let { details.add("–í—Ä–µ–º—è: $it") }
            activity.location?.let { details.add("–ì–¥–µ: $it") }
            activity.price?.let { details.add("–¶–µ–Ω–∞: $it") }
            activity.ageRestriction?.let { details.add("–í–æ–∑—Ä–∞—Å—Ç: $it") }
            
            if (details.isNotEmpty()) {
                sb.append("   _${details.joinToString(" | ")}_\n")
            }
            
            activity.url?.let { sb.append("   üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]($it)\n") }
            
            sb.append("\n")
        }
        
        return sb.toString()
    }
} 