package rut.uvp.family

import com.fasterxml.jackson.databind.ObjectMapper
import org.springframework.ai.chat.client.ChatClient
import org.springframework.ai.vectorstore.SearchRequest
import org.springframework.ai.vectorstore.VectorStore
import org.springframework.stereotype.Service
import rut.uvp.family.models.ActivityRequestData
import rut.uvp.family.models.SelectedTimeSlot
import rut.uvp.family.services.ConversationFlowService
import rut.uvp.family.services.EnhancedConversationFlowService
import rut.uvp.family.services.KudaGoApiService
import rut.uvp.family.services.SearchQueryService
import rut.uvp.family.services.TimeSlotService
import java.time.LocalDate
import java.time.format.DateTimeFormatter

@Service
class FamilyActivityTools(
    private val conversationFlowService: EnhancedConversationFlowService,
    private val searchQueryService: SearchQueryService,
    private val timeSlotService: TimeSlotService,
    private val kudaGoApiService: KudaGoApiService,
    private val objectMapper: ObjectMapper,
    private val vectorStore: VectorStore
) {
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –¥–æ—Å—É–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     *
     * @param query –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
     * @return –û—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
     */
    fun findFamilyActivities(query: String): String {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val activityRequest = conversationFlowService.extractActivityRequest(query)
            ?: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ."
         
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        val (needsMoreInfo, missingFields) = conversationFlowService.needsMoreInformation(activityRequest)
        if (needsMoreInfo) {
            val familyMemberRole = activityRequest.familyMember?.role
            val followUpQuestion = conversationFlowService.generateFollowUpQuestion(missingFields, familyMemberRole)
            return followUpQuestion
        }
         
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        var selectedTimeSlot: SelectedTimeSlot? = null
        if (activityRequest.needsTimeSlotSelection && activityRequest.preferredDate != null) {
            val timeSlots = timeSlotService.generateTimeSlotsForDate(LocalDate.parse(activityRequest.preferredDate))
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
            selectedTimeSlot = timeSlots.firstOrNull()
        }
         
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        val searchQuery = searchQueryService.generateSearchQuery(activityRequest, selectedTimeSlot)
            ?: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è."
         
        // –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ KudaGo
        val activities = kudaGoApiService.searchEvents(
            keywords = searchQuery.searchQuery,
            city = searchQuery.filters["–≥–æ—Ä–æ–¥"] ?: "msk",
            isFree = searchQuery.filters["–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]?.toBoolean(),
            categories = searchQuery.filters["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] ?: searchQuery.filters["—Ç–∏–ø_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
            dateFrom = searchQuery.filters["–¥–∞—Ç–∞"] ?: activityRequest.preferredDate
        )
         
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if (activities.isEmpty()) {
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. " +
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
        }
         
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return formatActivityResponse(activities, searchQuery.searchQuery, activityRequest)
    }
     
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     *
     * @return –°—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
     */
    fun getAvailableLocations(): String {
        val locations = kudaGoApiService.getAvailableLocations()
        val locationNames = locations.joinToString(", ") { it.name }
        return "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: $locationNames"
    }
     
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     *
     * @return –°—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    fun getAvailableCategories(): String {
        val categories = kudaGoApiService.getAvailableCategories()
        val categoryNames = categories.joinToString(", ") { it.name }
        return "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: $categoryNames"
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     *
     * @return –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–º—å–µ
     */
    fun getFamilyInformation(): String {
        val searchResults = vectorStore.similaritySearch(
            SearchRequest.builder()
                .query("—Å–µ–º—å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —á–ª–µ–Ω–∞—Ö —Å–µ–º—å–∏")
                .filter("type:family_member")
                .topK(10)
                .build()
        )
        
        return if (searchResults.isNullOrEmpty()) {
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        } else {
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å–µ–º—å–µ:\n\n" + 
            searchResults.joinToString("\n\n") { it.text ?: "" }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     *
     * @param memberRole –†–æ–ª—å —á–ª–µ–Ω–∞ —Å–µ–º—å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @return –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
     */
    fun getCalendarInformation(memberRole: String? = null): String {
        val query = memberRole?.let { "–∫–∞–ª–µ–Ω–¥–∞—Ä—å $it" } ?: "–∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏—è"
        val filter = memberRole?.let { "type:calendar_event AND member:$it" } ?: "type:calendar_event"
        
        val searchResults = vectorStore.similaritySearch(
            SearchRequest.builder()
                .query(query)
                .filter(filter)
                .topK(5)
                .build()
        )
        
        val today = LocalDate.now()
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        
        return if (searchResults.isNullOrEmpty()) {
            if (memberRole != null) {
                "–í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è $memberRole."
            } else {
                "–í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."
            }
        } else {
            val header = if (memberRole != null) {
                "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è $memberRole:\n\n"
            } else {
                "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:\n\n"
            }
            
            header + searchResults.joinToString("\n\n") { it.text ?: "" }
        }
    }
     
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
     *
     * @param activities –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
     * @param searchQuery –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     * @param requestData –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * @return –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
     */
    private fun formatActivityResponse(
        activities: List<rut.uvp.family.models.Activity>,
        searchQuery: String,
        requestData: ActivityRequestData
    ): String {
        val formattedActivities = activities.take(5).mapIndexed { index, activity ->
            val title = activity.title
            val description = activity.description.take(150) + if (activity.description.length > 150) "..." else ""
            val dateTime = if (activity.date != null && activity.time != null) {
                "${activity.date}, ${activity.time}"
            } else {
                activity.date ?: "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            }
            val location = activity.location ?: "–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            val price = activity.price ?: "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            val ageRestriction = activity.ageRestriction ?: "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            val url = activity.link ?: ""
             
            """
            |${index + 1}. **${title}**
            |üìÖ ${dateTime}
            |üìç ${location}
            |üí∞ ${price}
            |üë™ ${ageRestriction}
            |${description}
            |–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${url}
            """.trimMargin()
        }
         
        val memberInfo = if (requestData.familyMember != null) {
            val role = requestData.familyMember.role
            val age = requestData.familyMember.age
            "${role ?: ""}${if (age != null) " ${age}" else ""}"
        } else {
            ""
        }
         
        val intro = if (memberInfo.isNotEmpty()) {
            "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –¥–ª—è $memberInfo –ø–æ –∑–∞–ø—Ä–æ—Å—É \"$searchQuery\":"
        } else {
            "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É \"$searchQuery\":"
        }
         
        return "$intro\n\n${formattedActivities.joinToString("\n\n")}"
    }
} 